<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task = "http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.3.xsd">
    <!-- 基于注解的IOC -->
    <context:component-scan base-package="com"></context:component-scan>
    <!-- 默认的注解映射的支持 -->
    <context:annotation-config/>
    <!-- 启动mvc注解 -->
    <mvc:annotation-driven/>
    <!-- 缓存管理-->
    <!-- 启用缓存注解开关 -->
    <cache:annotation-driven cache-manager="cacheManager"/>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcache"></property>
    </bean>
    <bean id="ehcache"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:config/spring-ehcache.xml"></property>
    </bean>

    <!--线程池 -->
    <bean id="threadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数 -->
        <property name="corePoolSize" value="3"/>
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="10"/>
        <!-- 队列最大长度 >=mainExecutor.maxSize -->
        <property name="queueCapacity" value="25"/>
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="300"/>
        <!-- 线程池对拒绝任务(无线程可用)的处理策略 ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃. -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>
    <!--
          开始aop注解 让 AspectJ注解起作用
            自动为匹配的类生成代理对象
            proxy-target-class 默认为false 默认只能代理接口（使用JDK动态代理），当为true,才能代理目标类（使用CGLib动态代理）
      -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

    <!-- 上传文件的设置 ，maxUploadSize=-1，表示无穷大。uploadTempDir为上传的临时目录 -->

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="10485760000"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!--
    p:uploadTempDir="/fumai-project/test"
  -->
    <!-- 在配置文件中加入拦截器-->
    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <!--<bean class="com.bsg.api.interceptor.CommonInterceptor"></bean>-->
        <!-- 部署二种拦截器会发生问题，原先LoginInterceptor的方法没有执行-->
        <!--<bean class="com.bsg.api.interceptor.LoginWebRequestInterceptor"></bean>-->
        <mvc:interceptor>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <mvc:mapping path="/**"/><!-- 指定某些路径进行检验-->
            <mvc:exclude-mapping path="/*/login"></mvc:exclude-mapping><!-- 排除某些路径不进行检查-->
            <mvc:exclude-mapping path="/*/select"></mvc:exclude-mapping>
            <bean class="com.bsg.api.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
        <!--<mvc:interceptor>-->
        <!--<mvc:mapping path="/**"/>-->
        <!--<bean class="com.bsg.api.interceptor.CommonInterceptor"/>-->
        <!--</mvc:interceptor>-->
    </mvc:interceptors>

    <task:scheduled-tasks scheduler="myScheduler">
        <task:scheduled ref="taskJob" method="job1"  cron="0 * * * * ?" fixed-delay="5000" fixed-rate="5000"/>
    </task:scheduled-tasks>
    <task:scheduler id="myScheduler" pool-size="10"/>
</beans>