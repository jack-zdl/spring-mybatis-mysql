<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		">

    <!-- 引入jdbc配置文件等多个文件 -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:config/*.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可
                  <value>classpath:config/jdbc.properties</value>
                  多个
                 -->
            </list>
        </property>
    </bean>
    <!--
       org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer
       用于加载一些properties的配置文件
       加载上面的引入的properties的配置文件，下面才可以使用
    -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>

    <!-- dataSource druid -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClass" value="${jdbc.driver}" />

        <!-- 基本属性 url、user、password -->
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialPoolSize" value="${jdbc.pool.init}" />
        <property name="minPoolSize" value="${jdbc.pool.minIdle}" />
        <property name="maxPoolSize" value="${jdbc.pool.maxActive}" />

    </bean>




    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml"></property>
        <!--自动扫面mybatis的其他配置文件 -->
        <property name="configLocation" value="classpath:config/mybatis-config.xml" />
    </bean>

    <!--
        DAO接口所在包名，Spring会自动查找其下的类
        自动生成实现类，默认的名字是UserDao >>>>userDao
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="com.bsg.api.dao" />
    </bean>

    <!-- 配置Template模板-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--
        相关属性：1 mode:指定Spring事务管理框架创建通知bean的方式。可用的值有proxy和aspectj。
                前者是默认值，表示通知对象是个JDK代理；后者表示Spring AOP会使用AspectJ创建代理
                2 proxy-target-class：如果为true，Spring将创建子类来代理业务类；
                如果为false，则使用基于接口的代理。（如果使用子类代理，需要在类路径中添加CGLib.jar类库）
                3 order：如果业务类除事务切面外，还需要织入其他的切面，通过该属性可以控制事务切面在目标连接点的织入顺序。
                4 transaction-manager：指定到现有的PlatformTransaction Manager bean的引用，通知会使用该引用
     -->
    <tx:annotation-driven  transaction-manager="transactionManager"/>

</beans>